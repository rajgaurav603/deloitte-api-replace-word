AWSTemplateFormatVersion: 2010-09-09
Description: Word Check API Gateway and Lambda 

Parameters:
  apiGatewayName:
    Type: String
    Default: api-word-check

  lambdaFunctionName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: lambda-word-check

  PathPartValue:
    Type: String
    Default: api
Resources:
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  apiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: !Ref PathPartValue
      RestApiId: !Ref apiGateway

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      MethodResponses:
        - StatusCode: 200
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref apiGatewayResource
      RestApiId: !Ref apiGateway
      
  apiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      RestApiId: !Ref apiGateway
      Schema: {}

  apiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref apiGatewayDeployment
      Description: Lambda API Stage live
      RestApiId: !Ref apiGateway
      StageName: 'live'

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
            import logging
            def replace_word(input_string):
                company_name =['oracle','google','microsoft','amazon','deloitte','Oracle','Google','Microsoft','Amazon','Deloitte','ORACLE','GOOGLE','MICROSOFT','AMAZON','DELOITTE']
                try:
                    for name in company_name:
                        input_string=input_string.replace(name,name+"Â©")
                    return(input_string)
                except error as e:
                    logging.error(e)
                    sys.exit()
        
            def lambda_handler(event, context):
                print(event)
                if 'input_string' in event.keys():
                    orig_string=event['input_string']
                    print("original string is:",orig_string)
                    result_string=replace_word(orig_string)
                    print("Final string is:",result_string)
                    return(result_string)
                else:
                    return("The request must follow this syntax: {'input_string':'String to be corrected'}")
                    
      Description:  Lambda function to replace word
      FunctionName: !Ref lambdaFunctionName
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: python3.7

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/POST/${PathPartValue}

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*
          PolicyName: lambda

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunctionName}
      RetentionInDays: 90

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStage}/${PathPartValue}
  lambdaArn:
    Value: !GetAtt lambdaFunction.Arn

